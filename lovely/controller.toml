[manifest]
dump_lua = true
priority = 0
version = "1.4.0"

[[patches]]
[patches.pattern]
match_indent = false
pattern = '''
self.collision_list = {} --A list of all node that the cursor currently collides with
'''
payload = '''
--Touch controller
self.touch_control = {s_tap = {target = nil,handled = true}, l_press = {target = nil, handled = true}}
'''
position = "after"
target = "engine/controller.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = false
pattern = '''
self.cursor_hover.time = G.TIMERS.TOTAL
'''
payload = '''
self.cursor_hover.uptime = G.TIMERS.UPTIME
'''
position = "after"
target = "engine/controller.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = false
pattern = '''
self.cursor_down.time = G.TIMERS.TOTAL
'''
payload = '''
self.cursor_down.uptime = G.TIMERS.UPTIME
'''
position = "after"
target = "engine/controller.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = false
pattern = '''
self.cursor_up.time = G.TIMERS.TOTAL
'''
payload = '''
self.cursor_up.uptime = G.TIMERS.UPTIME
'''
position = "after"
target = "engine/controller.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = false
pattern = '''
if not self.cursor_down.handled then
'''
payload = '''
    self.cursor_down.distance = 0
    self.cursor_down.duration = 0
'''
position = "after"
target = "engine/controller.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = false
pattern = '''
--The object being dragged
'''
payload = '''
 --The object being dragged
if not self.dragging.handled and self.cursor_down.duration and (self.cursor_down.duration  > 0.1) then
    create_drag_target_from_card(self.dragging.target)
    self.dragging.handled = true
end
'''
position = "before"
target = "engine/controller.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = false
pattern = '''
    if self.hovering.target and self.hovering.target == self.dragging.target and not self.HID.touch then
        self.hovering.target:stop_hover()
    end
'''
payload = '''
 if self.is_cursor_down then 
        self.cursor_down.distance = math.max(Vector_Dist(self.cursor_down.T, self.cursor_hover.T), self.cursor_down.distance or 0)
        self.cursor_down.duration = G.TIMERS.UPTIME - self.cursor_down.uptime
        if self.cursor_up.target then
            self.cursor_up.target = nil
        end
    end
    if not self.is_cursor_down then
        if self.cursor_down.target then
            self.cursor_down.target = nil
            self.cursor_down.distance = nil
            self.cursor_down.duration = nil
        end
    end
'''
position = "after"
target = "engine/controller.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = false
pattern = '''
                --if not, was the Cursor dragging some other thing?
                elseif self.dragging.prev_target and self.cursor_up.target and self.cursor_up.target.states.release_on.can then 
                    self.released_on.target = self.cursor_up.target
                    self.released_on.handled = false
                end
            end
'''
payload = '''

            if self.cursor_down.distance < G.MIN_CLICK_DIST and self.cursor_down.duration < 0.2 then 
                if self.cursor_down.target.states.click.can and not self.touch_control.l_press.target then
                    self.touch_control.s_tap.target = self.cursor_down.target
                    self.touch_control.s_tap.time = self.cursor_up.time - self.cursor_down.time
                    self.touch_control.s_tap.handled = false
                end
            --if not, was the Cursor dragging some other thing?
            elseif self.dragging.prev_target then 
                local releasable = nil
                for _, v in ipairs(self.collision_list) do
                    if v.states.hover.can and (not v.states.drag.is) and (v ~= self.dragging.prev_target) then
                        releasable = v
                        break 
                    end
                end
                if releasable and releasable.states.release_on.can then 
                    self.released_on.target = releasable
                    self.released_on.handled = false
                end
            end
'''
position = "after"
target = "engine/controller.lua"
times = 1
