[manifest]
dump_lua = true
priority = 0
version = "1.4.0"

[[patches]]
[patches.pattern]
match_indent = false
pattern = '''
self.ARGS.button_colours[2] = (((collided_button.config.hover and collided_button.states.hover.is) or (collided_button.last_clicked and collided_button.last_clicked > G.TIMERS.REAL - 0.1)) and G.C.UI.HOVER or nil)
'''
payload = '''
self.ARGS.button_colours[2] = (((collided_button.config.hover and collided_button.states.hover.is and ((not G.CONTROLLER.HID.touch) or G.CONTROLLER.is_cursor_down)) or (collided_button.last_clicked and collided_button.last_clicked > G.TIMERS.REAL - 0.1)) and G.C.UI.HOVER or nil)
'''
position = "at"
target = "engine/ui.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = false
pattern = '''
function UIElement:release(other)
'''
payload = '''
    if self.config.release_func then 
        self.config.release_func(other)
    end
'''
position = "after"
target = "engine/ui.lua"
times = 1

[[patches]]
[patches.pattern]
match_indent = false
pattern = '''
--Draw the outline of the object
'''
payload = '''
    if self.config.pulse_border then
        self.border_pulse_timer = self.border_pulse_timer or G.TIMERS.REAL
        local lw = 2*math.max(0, 0.5*math.cos(6*(G.TIMERS.REAL - self.border_pulse_timer)) + 0.5)
        prep_draw(self, 1)
        love.graphics.scale((1)/(G.TILESIZE))
        love.graphics.setLineWidth(lw + 1)
        love.graphics.setColor(adjust_alpha(G.C.BLACK, 0.2*lw, true))
        self:draw_pixellated_rect('fill', parallax_dist)
        love.graphics.setColor(self.config.colour[4] > 0 and mix_colours(G.C.WHITE, self.config.colour, 0.8) or G.C.WHITE)
        self:draw_pixellated_rect('line', parallax_dist)
        love.graphics.pop()
    end
'''
position = "before"
target = "engine/ui.lua"
times = 1
